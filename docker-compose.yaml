networks:
  loki:
    driver: bridge

services:
  postgres:
    container_name: postgres
    image: postgres:16
    restart: always
    volumes:
      - ./postgres-data:/var/lib/postgresql/data
      - ./logs/postgres-log:/var/log/postgresql
      - ./config/postgresql.conf:/etc/postgresql/postgresql.conf
    command: 'postgres -c config_file=/etc/postgresql/postgresql.conf'
    ports:
      - '5432:5432'
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    networks:
      - loki

  promtail:
    container_name: promtail
    image: grafana/promtail:latest
    command: '--config.file=/etc/promtail/promtail-config.yaml'
    volumes:
      - ./config/promtail-config.yaml:/etc/promtail/promtail-config.yaml
      - ./logs:/logs
      - ./logs/postgres-log:/var/log/postgresql
    restart: always
    networks:
      - loki

  loki:
    container_name: loki
    image: grafana/loki:latest
    user: root
    command: '--config.file=/etc/loki/loki-config.yaml'
    volumes:
      - ./config/loki-config.yaml:/etc/loki/loki-config.yaml
      - ./loki:/loki
    ports:
      - '3100:3100'
    restart: always
    networks:
      - loki

  grafana:
    container_name: grafana
    image: grafana/grafana:latest
    ports:
      - '3000:3000'
    volumes:
      - ./grafana-data:/var/lib/grafana
    restart: always
    environment:
      - GF_SECURITY_ADMIN_USER=${GF_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GF_PASSWORD}
    env_file:
      - .env
    networks:
      - loki

  # prometheus:
  #   container_name: prometheus
  #   image: prom/prometheus:latest
  #   command:
  #     - '--config.file=/etc/prometheus/prometheus.yaml'
  #   volumes:
  #     - ./config/prometheus-config.yaml:/etc/prometheus/prometheus-config.yaml
  #     - ./prometheus-data:/prometheus
  #   ports:
  #     - '9090:9090'
  #   restart: always
  #   networks:
  #     - loki

volumes:
  postgres-data:
  loki:
  grafana-data:
  # prometheus-data:
      POSTGRES_DB: ${POSTGRES_NAME}

  redis:
    image: redis:latest
    restart: always
    ports:
      - '6379:6379'
    networks:
      - mynetwork
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 30s
      timeout: 10s
      retries: 5

networks:
  mynetwork: # 네트워크 정의 추가
    driver: bridge
